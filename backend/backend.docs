```markdown
# Implementing the Supabase Banking Database & API

This document explains the design and implementation of our Supabase-backed banking system. It covers the purpose of the database schema (created via `setup_bank.sql`), the initialization of the Supabase client (`supabaseClient.js`), and how these components work together within our API.

---

## 1. Overview

Our banking system is built using Supabase (which provides a PostgreSQL database) alongside a Node.js API (using Express). The system is divided into two major parts:

- **Database Setup**:  
  The SQL script (`setup_bank.sql`) is used to create the necessary database schema, including tables, constraints, indexes, and dummy data. This schema includes tables for user accounts, bank accounts, transactions, loans, transfers, and expenditures.

- **Application Connectivity**:  
  The `supabaseClient.js` file initializes a Supabase client using the `@supabase/supabase-js` library and environment variables. This client serves as the connection point between your API code and your Supabase database.

Together, these components enable the API to query and manipulate the banking data stored in the database.

---

## 2. `setup_bank.sql`: The Database Setup Script

### Purpose
- **Schema Definition**:  
  `setup_bank.sql` contains SQL commands that define the structure of the database. It creates tables such as `user_accounts`, `bank_accounts`, `transactions`, `loans`, `transfers`, and `expenditures`.

- **Constraints & Indexes**:  
  The script enforces business rules (e.g., non-negative balances, unique email addresses) using check constraints and creates indexes on frequently queried columns to improve performance.

- **Dummy Data Insertion**:  
  For testing and development purposes, the script includes INSERT statements that add dummy records into the tables. This helps simulate a working system and verify that API queries are returning the expected data.

### How to Use It
- **Running the Script**:  
  Use the Supabase SQL Editor or a PostgreSQL client (such as `psql`) to run this script. For example, using `psql`:
  ```bash
  psql "$DATABASE_URL" -f setup_bank.sql
  ```
- **Environment Considerations**:  
  This script should be run in your development (or staging) environment first. For production, you might manage schema changes through a proper migration tool.

---

## 3. `supabaseClient.js`: Initializing the Supabase Client

### Purpose
- **Database Connection**:  
  This file uses the `@supabase/supabase-js` package to create a client instance that connects to your Supabase project’s PostgreSQL database.

- **Environment Variables**:  
  It retrieves sensitive connection details (such as `SUPABASE_URL` and `SUPABASE_SERVICE_ROLE_KEY`) from environment variables. This allows you to keep your credentials secure and separate from your codebase.

- **Centralized Access**:  
  By exporting the client, other parts of your application (e.g., API route handlers) can import and use the same database connection. This ensures consistency and reduces the need to repeatedly configure the connection.

### Example Content
```js
// supabaseClient.js
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // Use the appropriate key
const supabase = createClient(supabaseUrl, supabaseKey);

module.exports = supabase;
```

### How to Use It
- **Importing in API Code**:  
  In your API (e.g., `server.js`), import the Supabase client:
  ```js
  const supabase = require('./supabaseClient');
  ```
  This client instance is then used for all database operations (inserts, selects, updates, etc.) within your endpoints.

---

## 4. How They Are Interlinked

- **Database Initialization & Application Logic**:  
  - The **`setup_bank.sql`** script establishes the entire database schema. Once this script is run, your Supabase PostgreSQL database contains all the tables, constraints, and even some dummy data.
  - The **`supabaseClient.js`** file provides your application with the ability to connect to that same database using the credentials provided via environment variables.

- **Environment Variables as the Link**:  
  Both files rely on environment variables for configuration. The SQL script (when run manually or via a migration tool) and the Supabase client in your Node.js API both use the connection details (like `SUPABASE_URL`) to ensure they are referring to the same database instance.

- **Consistent Data Access**:  
  In your API endpoints (e.g., for registration, login, transactions), you use the Supabase client (from `supabaseClient.js`) to query or update data that was structured by `setup_bank.sql`. This ensures that your application’s business logic is operating on a well-defined and tested schema.

---

## 5. Why This Setup

- **Modularity & Separation of Concerns**:  
  Keeping the database schema in a separate SQL script (`setup_bank.sql`) allows for easy modifications, version control, and migrations. Similarly, isolating the connection logic in `supabaseClient.js` centralizes database access and simplifies changes (such as updating credentials).

- **Security**:  
  Sensitive connection details (such as the service role key) and JWT secrets are stored in environment variables, reducing the risk of exposing them in your source code. This separation of configuration from code is a best practice for secure application development.

- **Maintainability**:  
  By dividing responsibilities—schema setup in SQL and connection/client initialization in JavaScript—you can more easily manage, test, and update your system. Changes to the schema do not require changes in the application code (except where business logic depends on the schema), and the Supabase client can be reused throughout the application.

- **Scalability**:  
  As your system grows, having a well-defined database schema and a centralized client makes it easier to introduce new features, optimize queries, and manage database migrations.

---

## Conclusion

The combination of `setup_bank.sql` and `supabaseClient.js` provides a clear separation between database schema management and application logic. The SQL script sets up your database’s structure and populates it with initial data, while the Supabase client ensures that your API can securely and consistently interact with that database. Together, they form the backbone of a robust, scalable banking system.

For further details, please refer to the Supabase documentation and the relevant sections of our API code.
```

---


---

# Connection Documentation

This document explains how the API establishes connections to both Supabase and PostgreSQL. The connection setup is split into two parts: one for Supabase (using the Supabase JavaScript client) and another for PostgreSQL (using a connection pool from the `pg` library). Both connections are configured using environment variables for security and flexibility.

---

## 1. Environment Variables

To keep sensitive credentials and configuration details secure, the API loads its configuration from a `.env` file. The following environment variables are required:

- **SUPABASE_URL**  
  The URL of your Supabase project (e.g., `https://your-project-ref.supabase.co`).

- **SUPABASE_SERVICE_ROLE_KEY**  
  The service role key provided by Supabase. This key grants admin-level privileges for operations that require elevated permissions.

- **DATABASE_URL**  
  The PostgreSQL connection string provided by Supabase (or another PostgreSQL host). It has the format:  
  `postgres://username:password@host:port/database`

- **JWT_SECRET**  
  A secret string used to sign and verify JWT tokens for authentication purposes.

- **PORT**  
  The port on which the API server runs (default is 3000).

These variables are loaded using the `dotenv` package at the very beginning of the server code:

```js
require('dotenv').config({ path: '../.env' });
```

This approach helps in keeping configuration separate from the code and makes it easy to change settings without modifying the source code.

---

## 2. Connecting to Supabase

### Using the Supabase JavaScript Client

The API uses the official Supabase JavaScript library (`@supabase/supabase-js`) to interact with the Supabase backend. The connection is established as follows:

1. **Import and Initialize the Client:**

   The `createClient` method from `@supabase/supabase-js` is used to initialize a client instance with the Supabase URL and the service role key:

   ```js
   const { createClient } = require('@supabase/supabase-js');

   const SUPABASE_URL = process.env.SUPABASE_URL;
   const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
   const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
   ```

2. **Why Use the Service Role Key?**

   The service role key bypasses Row Level Security (RLS) and grants administrative privileges. It is intended to be used on server-side applications only. Using environment variables for this key ensures that it is not exposed to the client.

3. **Usage in the API:**

   Once the client is initialized, it is used throughout the API to perform various database operations such as querying tables, inserting new records, and calling stored procedures (for example, the `transfer_funds` stored procedure for atomic fund transfers).

For further details, refer to the [Supabase JavaScript API Reference](citeturn0search6).

---

## 3. Connecting to PostgreSQL

### Using the Node-Postgres (`pg`) Library

In addition to the Supabase client, the API directly connects to PostgreSQL using the `pg` library. This is done to support operations that may require direct SQL queries or interactions with the database outside of what Supabase's client provides.

1. **Import and Initialize the PostgreSQL Pool:**

   The `Pool` class from the `pg` package is used to create a connection pool. The connection string is passed from the environment variables:

   ```js
   const { Pool } = require('pg');

   const pool = new Pool({
     connectionString: process.env.DATABASE_URL,
   });
   ```

2. **Advantages of a Connection Pool:**

   - **Resource Efficiency:** A pool allows the application to reuse established connections, reducing the overhead of creating a new connection for every query.
   - **Scalability:** It supports multiple simultaneous connections and can be tuned (by configuring the maximum number of clients, idle timeout, etc.) to handle various loads.

3. **Usage in the API:**

   The pool is used to execute raw SQL queries for operations such as testing the connection (e.g., querying the `user_accounts` table), as well as other CRUD operations that may not be directly supported by the Supabase client.

For more details on connection pooling with `pg`, you can review the [node-postgres documentation](https://node-postgres.com/).

---

## 4. JWT Configuration

### Securing API Endpoints

The API uses JWT tokens to protect endpoints and to ensure that only authenticated users can access certain operations.

1. **JWT Secret:**  
   The secret used to sign tokens is loaded from the environment variable `JWT_SECRET`.

2. **Issuing Tokens:**  
   After a successful login, the API creates a token that includes the user's ID and email, and signs it using `jsonwebtoken`:

   ```js
   const jwt = require('jsonwebtoken');
   const tokenPayload = { user_id: user.user_id, email: user.email };
   const token = jwt.sign(tokenPayload, JWT_SECRET, { expiresIn: '1h' });
   ```

3. **Authentication Middleware:**  
   The middleware function `authenticateToken` checks for the presence of the token in the `Authorization` header and verifies it:

   ```js
   function authenticateToken(req, res, next) {
     const authHeader = req.headers['authorization'];
     const token = authHeader && authHeader.split(' ')[1];
     if (!token) return res.status(401).json({ error: 'Missing token' });

     jwt.verify(token, JWT_SECRET, (err, user) => {
       if (err) return res.status(403).json({ error: 'Invalid token' });
       req.user = user;
       next();
     });
   }
   ```

This authentication mechanism ensures that sensitive endpoints are accessible only to authorized users.

---

## 5. Summary

- **Environment Configuration:** Uses `dotenv` to securely load connection details and secrets.
- **Supabase Connection:** Established via the `createClient` function with a service role key for admin privileges.
- **PostgreSQL Connection:** Uses the `pg` library’s connection pool to execute direct SQL queries.
- **JWT Security:** Tokens are issued and verified using `jsonwebtoken` to secure API endpoints.

This setup provides a robust and secure way to interact with your Supabase backend and PostgreSQL database, ensuring that your API is both scalable and secure.

---

For more details on Supabase, visit the [Supabase Documentation](https://supabase.com/docs) (citeturn0search0), and for information on the PostgreSQL client library, see the [node-postgres docs](https://node-postgres.com/).

